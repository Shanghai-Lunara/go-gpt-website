{
  "swagger": "2.0",
  "info": {
    "description": "The purpose of this service is to provide an application\nthat is using plain go code to define an API",
    "title": "API.",
    "version": "0.0.1"
  },
  "host": "localhost",
  "paths": {
    "/ftp/compress/{projectName}/{branchName}/{zipType}/{zipFlags}": {
      "get": {
        "description": "ftp compress",
        "tags": [
          "ftp",
          "compress"
        ],
        "summary": "It would compress the project into zip with the specific flags and upload to the ftp server",
        "operationId": "FtpCompress",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BranchName",
            "description": "BranchName",
            "name": "branch_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ZipType",
            "description": "ZipType",
            "name": "zip_type",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ZipFlags",
            "description": "ZipFlags",
            "name": "zip_flags",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonResponse"
          }
        }
      }
    },
    "/ftp/log/{projectName}/{filter}": {
      "get": {
        "description": "ftp log",
        "tags": [
          "ftp",
          "log"
        ],
        "summary": "It would pull ftp files from the remote ftp server with the specific filter",
        "operationId": "FtpLog",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Filter",
            "description": "Filter",
            "name": "filter",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FtpLogResponse"
          }
        }
      }
    },
    "/ftp/read/{projectName}/{fileName}": {
      "get": {
        "description": "ftp read",
        "tags": [
          "ftp",
          "read"
        ],
        "summary": "It would get the content of the specific file from the remote ftp server by the filter",
        "operationId": "FtpReadFile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "FileName",
            "description": "FileName",
            "name": "file_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FtpReadFileResponse"
          }
        }
      }
    },
    "/ftp/write": {
      "post": {
        "description": "ftp write",
        "tags": [
          "ftp",
          "write"
        ],
        "summary": "It would overwrite the specific file on the FTP server with the provided content",
        "operationId": "FtpWriteFile",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "projectName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "FileName",
            "description": "FileName",
            "name": "fileName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Content",
            "description": "Content",
            "name": "content",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonResponse"
          }
        }
      }
    },
    "/git/all": {
      "get": {
        "description": "This will return all gits' info",
        "tags": [
          "git"
        ],
        "summary": "get all gits' info",
        "operationId": "all",
        "responses": {
          "200": {
            "$ref": "#/responses/GitAllResponse"
          }
        }
      }
    },
    "/git/gen/{projectName}/{branchName}": {
      "get": {
        "description": "generate and commit",
        "tags": [
          "git",
          "gen"
        ],
        "summary": "It would generate code and commit to git with the specific projectName and branchName",
        "operationId": "genSpecificGit",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BranchName",
            "description": "BranchName",
            "name": "branch_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonResponse"
          }
        }
      }
    },
    "/git/set/{projectName}/{branchName}/{svnTag}": {
      "get": {
        "description": "set",
        "tags": [
          "git",
          "set"
        ],
        "summary": "It would set a git branch with the specific tag",
        "operationId": "SetParam",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BranchName",
            "description": "BranchName",
            "name": "branch_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SvnTag",
            "description": "SvnTag",
            "name": "svn_tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonResponse"
          }
        }
      }
    },
    "/oss/content/{projectName}/{env}": {
      "get": {
        "description": "This will return the specific object's content in oss",
        "tags": [
          "oss",
          "envs"
        ],
        "summary": "get oss envs",
        "operationId": "OssContent",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Env",
            "description": "Env",
            "name": "env",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OssContentResponse"
          }
        }
      }
    },
    "/oss/envs/{projectName}": {
      "get": {
        "description": "This will return the specific project's oss environments",
        "tags": [
          "oss",
          "envs"
        ],
        "summary": "get oss envs",
        "operationId": "OssEnvs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OssEnvsResponse"
          }
        }
      }
    },
    "/oss/update": {
      "post": {
        "description": "ftp write",
        "tags": [
          "oss",
          "update"
        ],
        "summary": "It would overwrite the specific file on the oss server with the provided content",
        "operationId": "OssUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "projectName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Env",
            "description": "Env",
            "name": "env",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Title",
            "description": "Title",
            "name": "title",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Time",
            "description": "Time",
            "name": "time",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Content",
            "description": "Content",
            "name": "content",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonResponse"
          }
        }
      }
    },
    "/svn/commit/{projectName}/{branchName}/{svnMessage}": {
      "get": {
        "description": "scn commit",
        "tags": [
          "svn",
          "commit"
        ],
        "summary": "It would sync project files from the specific git.branch and commit to svn server",
        "operationId": "SetSvnTag",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "BranchName",
            "description": "BranchName",
            "name": "branch_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SvnMessage",
            "description": "SvnTag",
            "name": "svn_message",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CommonResponse"
          }
        }
      }
    },
    "/svn/log/{projectName}/{logNumber}": {
      "get": {
        "description": "svn log",
        "tags": [
          "svn",
          "log"
        ],
        "summary": "It would pull svn logs from the remote svn server with the specific number",
        "operationId": "SvnLog",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "LogNumber",
            "description": "LogNumber",
            "name": "log_number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SvnLogResponse"
          }
        }
      }
    },
    "/task/all/{projectName}": {
      "get": {
        "description": "task all",
        "tags": [
          "task",
          "all"
        ],
        "summary": "It would get all the tasks of the specific project",
        "operationId": "TaskAll",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ProjectName",
            "description": "ProjectName",
            "name": "project_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TaskAllResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "Branch": {
      "type": "object",
      "properties": {
        "active": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Active"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "svn_tag": {
          "type": "string",
          "x-go-name": "SvnTag"
        }
      },
      "x-go-package": "github.com/Shanghai-Lunara/go-gpt/pkg/operator"
    },
    "Command": {
      "description": "Command",
      "type": "object",
      "properties": {
        "branch_name": {
          "type": "string",
          "x-go-name": "BranchName"
        },
        "command": {
          "type": "string",
          "x-go-name": "Command"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "project_name": {
          "type": "string",
          "x-go-name": "ProjectName"
        },
        "zip_flags": {
          "type": "string",
          "x-go-name": "ZipFlags"
        },
        "zip_type": {
          "type": "string",
          "x-go-name": "ZipType"
        }
      },
      "x-go-package": "github.com/Shanghai-Lunara/go-gpt/pkg/operator"
    },
    "Entry": {
      "type": "object",
      "title": "Entry describes a file and is returned by List().",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "size": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/Shanghai-Lunara/go-gpt/pkg/operator"
    },
    "GitInfo": {
      "type": "object",
      "properties": {
        "list_branches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Branch"
          },
          "x-go-name": "ListBranches"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/Shanghai-Lunara/go-gpt/pkg/operator"
    },
    "Logentry": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "x-go-name": "Author"
        },
        "date_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateTime"
        },
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        },
        "paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Path"
          },
          "x-go-name": "Paths"
        },
        "revision": {
          "type": "string",
          "x-go-name": "Revision"
        }
      },
      "x-go-package": "github.com/Shanghai-Lunara/go-gpt/pkg/operator"
    },
    "NoticeContent": {
      "description": "NoticeContent",
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "time": {
          "type": "string",
          "x-go-name": "Time"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/Shanghai-Lunara/go-gpt/pkg/operator"
    },
    "Path": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "x-go-name": "Action"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "prop_mods": {
          "type": "string",
          "x-go-name": "PropMods"
        },
        "text_mods": {
          "type": "string",
          "x-go-name": "TextMods"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/Shanghai-Lunara/go-gpt/pkg/operator"
    },
    "RWMutex": {
      "description": "A RWMutex must not be copied after first use.\n\nIf a goroutine holds a RWMutex for reading and another goroutine might\ncall Lock, no goroutine should expect to be able to acquire a read lock\nuntil the initial read lock is released. In particular, this prohibits\nrecursive read locking. This is to ensure that the lock eventually becomes\navailable; a blocked Lock call excludes new readers from acquiring the\nlock.",
      "type": "object",
      "title": "A RWMutex is a reader/writer mutual exclusion lock.\nThe lock can be held by an arbitrary number of readers or a single writer.\nThe zero value for a RWMutex is an unlocked mutex.",
      "x-go-package": "sync"
    }
  },
  "responses": {
    "Command": {
      "description": "Command",
      "headers": {
        "branch_name": {
          "type": "string"
        },
        "command": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "project_name": {
          "type": "string"
        },
        "zip_flags": {
          "type": "string"
        },
        "zip_type": {
          "type": "string"
        }
      }
    },
    "CommonResponse": {
      "description": "CommonResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          }
        }
      }
    },
    "FtpLogResponse": {
      "description": "FtpLogResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message",
          "entries"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "entries": {
            "description": "The list of ftp files",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Entry"
            },
            "x-go-name": "Entries"
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          }
        }
      }
    },
    "FtpReadFileResponse": {
      "description": "FtpLogResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message",
          "content"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "content": {
            "description": "The file content",
            "type": "string",
            "x-go-name": "Content"
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          }
        }
      }
    },
    "GitAllResponse": {
      "description": "GitAllResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message",
          "gits"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "gits": {
            "description": "The set of all gits",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/GitInfo"
            },
            "x-go-name": "Gits"
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          }
        }
      }
    },
    "NoticeContent": {
      "description": "NoticeContent",
      "headers": {
        "content": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "OssContentResponse": {
      "description": "OssContentResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message",
          "notice_content"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          },
          "notice_content": {
            "$ref": "#/definitions/NoticeContent"
          }
        }
      }
    },
    "OssEnvsResponse": {
      "description": "OssEnvsResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message",
          "envs"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "envs": {
            "description": "envs",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Envs"
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          }
        }
      }
    },
    "SvnLogResponse": {
      "description": "SvnLogResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message",
          "logentrys"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "logentrys": {
            "description": "The set of svn logs",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Logentry"
            },
            "x-go-name": "Logentrys"
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          }
        }
      }
    },
    "Task": {
      "description": "Task",
      "schema": {
        "$ref": "#/definitions/Command"
      },
      "headers": {
        "command": {},
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mu": {},
        "status": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TaskAllResponse": {
      "description": "FtpLogResponse",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message",
          "tasks"
        ],
        "properties": {
          "code": {
            "description": "The BaseResponse code",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code",
            "example": 100001
          },
          "message": {
            "description": "The BaseResponse message",
            "type": "string",
            "x-go-name": "Message",
            "example": "success"
          },
          "tasks": {
            "description": "all tasks",
            "x-go-name": "Tasks"
          }
        }
      }
    }
  }
}